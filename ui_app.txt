"""
Streamlit UI for the DocuChat application.
Provides a user-friendly interface for document management and chatting.
"""

import os
import logging
import yaml
import json
import time
import base64
import requests
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple, Union

import streamlit as st
from streamlit.components.v1 import html
import pandas as pd
import matplotlib.pyplot as plt

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load configuration
def load_config():
    try:
        with open("config/config.yaml", 'r') as f:
            return yaml.safe_load(f)
    except Exception as e:
        st.error(f"Error loading configuration: {str(e)}")
        return {}

# API client
class DocuChatClient:
    """API client for the DocuChat backend."""
    
    def __init__(self, api_url: str):
        """
        Initialize the client.
        
        Args:
            api_url: API base URL
        """
        self.api_url = api_url
    
    def upload_document(self, file) -> Dict[str, Any]:
        """
        Upload a document to the API.
        
        Args:
            file: File object
            
        Returns:
            API response
        """
        files = {"file": file}
        response = requests.post(f"{self.api_url}/documents/upload", files=files)
        response.raise_for_status()
        return response.json()
    
    def list_documents(self) -> List[Dict[str, Any]]:
        """
        List all documents.
        
        Returns:
            List of documents
        """
        response = requests.get(f"{self.api_url}/documents")
        response.raise_for_status()
        return response.json()
    
    def delete_document(self, document_id: str) -> Dict[str, Any]:
        """
        Delete a document.
        
        Args:
            document_id: Document ID
            
        Returns:
            API response
        """
        response = requests.delete(f"{self.api_url}/documents/{document_id}")
        response.raise_for_status()
        return response.json()
    
    def chat(self, query: str, conversation_id: Optional[str] = None, include_context: bool = False) -> Dict[str, Any]:
        """
        Send a chat message.
        
        Args:
            query: User query
            conversation_id: Conversation ID (optional)
            include_context: Whether to include context in response
            
        Returns:
            API response
        """
        data = {
            "query": query,
            "conversation_id": conversation_id,
            "include_context": include_context
        }
        response = requests.post(f"{self.api_url}/chat", json=data)
        response.raise_for_status()
        return response.json()
    
    def submit_feedback(self, conversation_id: str, message_id: str, rating: int, feedback_text: Optional[str] = None) -> Dict[str, Any]:
        """
        Submit feedback for a message.
        
        Args:
            conversation_id: Conversation ID
            message_id: Message ID
            rating: Rating (1-5)
            feedback_text: Feedback text (optional)
            
        Returns:
            API response
        """
        data = {
            "conversation_id": conversation_id,
            "message_id": message_id,
            "rating": rating,
            "feedback_text": feedback_text
        }
        response = requests.post(f"{self.api_url}/feedback", json=data)
        response.raise_for_status()
        return response.json()
    
    def start_training(self, model_name: str, max_steps: Optional[int] = None, learning_rate: Optional[float] = None) -> Dict[str, Any]:
        """
        Start model training.
        
        Args:
            model_name: Model name
            max_steps: Maximum training steps (optional)
            learning_rate: Learning rate (optional)
            
        Returns:
            API response
        """
        data = {
            "model_name": model_name,
            "max_steps": max_steps,
            "learning_rate": learning_rate
        }
        response = requests.post(f"{self.api_url}/train", json=data)
        response.raise_for_status()
        return response.json()
    
    def get_training_status(self, training_id: str) -> Dict[str, Any]:
        """
        Get training status.
        
        Args:
            training_id: Training ID
            
        Returns:
            API response
        """
        response = requests.get(f"{self.api_url}/train/{training_id}")
        response.raise_for_status()
        return response.json()

# Streamlit UI components
def render_sidebar():
    """Render the sidebar with navigation links."""
    st.sidebar.title("DocuChat")
    
    # Navigation
    page = st.sidebar.radio("Navigation", ["Chat", "Documents", "Training"])
    
    # API configuration
    with st.sidebar.expander("API Settings"):
        api_url = st.text_input("API URL", value="http://localhost:8000")
        st.session_state.api_url = api_url
    
    # About section
    with st.sidebar.expander("About"):
        st.write("""
        **DocuChat** is a document-based chatbot with reinforcement learning capabilities.
        
        Upload documents, chat with them, and provide feedback to help the model improve.
        """)
    
    return page

def render_chat_page(client: DocuChatClient):
    """Render the chat page."""
    st.title("Chat with Your Documents")
    
    # Initialize chat history if not exists
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Initialize conversation ID if not exists
    if "conversation_id" not in st.session_state:
        st.session_state.conversation_id = f"conv_{int(time.time())}"
    
    # Display chat messages
    for i, message in enumerate(st.session_state.messages):
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # Add feedback buttons for assistant messages
            if message["role"] == "assistant":
                cols = st.columns([1, 1, 1, 1, 1, 3])
                message_id = message.get("id", f"msg_{i}")
                
                # Star rating buttons
                for j in range(5):
                    if cols[j].button(f"{'â˜…' * (j + 1)}", key=f"rating_{message_id}_{j+1}"):
                        try:
                            client.submit_feedback(
                                st.session_state.conversation_id,
                                message_id,
                                j + 1
                            )
                            st.success(f"Feedback submitted: {j + 1} stars")
                        except Exception as e:
                            st.error(f"Error submitting feedback: {str(e)}")
    
    # Chat input
    if prompt := st.chat_input("Ask a question about your documents..."):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Display assistant response
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            
            try:
                # Get context toggle
                include_context = st.session_state.get("include_context", False)
                
                # Call API
                with st.spinner("Thinking..."):
                    response = client.chat(
                        query=prompt,
                        conversation_id=st.session_state.conversation_id,
                        include_context=include_context
                    )
                
                # Display response
                message_placeholder.markdown(response["response"])
                
                # Display context if included
                if include_context and response.get("context"):
                    with st.expander("Context Used"):
                        st.markdown(response["context"])
                
                # Add response to chat history
                message_id = f"msg_{len(st.session_state.messages)}"
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response["response"],
                    "id": message_id
                })
                
                # Display processing time
                st.caption(f"Processed in {response['processing_time']:.2f} seconds")
            
            except Exception as e:
                message_placeholder.error(f"Error: {str(e)}")
    
    # Settings
    with st.expander("Chat Settings"):
        st.checkbox("Include context in response", key="include_context")
        
        if st.button("Start New Conversation"):
            st.session_state.messages = []
            st.session_state.conversation_id = f"conv_{int(time.time())}"
            st.success("Started new conversation")
            st.rerun()

def render_documents_page(client: DocuChatClient):
    """Render the documents page."""
    st.title("Document Management")
    
    # Document upload
    st.subheader("Upload Document")
    uploaded_file = st.file_uploader("Choose a document", type=["pdf", "txt", "docx", "md"])
    
    if uploaded_file is not None:
        if st.button("Process Document"):
            try:
                with st.spinner("Uploading and processing document..."):
                    response = client.upload_document(uploaded_file)
                
                st.success(f"Document uploaded successfully with ID: {response['document_id']}")
                
                # Refresh document list
                time.sleep(1)
                st.rerun()
            
            except Exception as e:
                st.error(f"Error uploading document: {str(e)}")
    
    # Document list
    st.subheader("Your Documents")
    
    try:
        documents = client.list_documents()
        
        if not documents:
            st.info("No documents found. Upload some documents to get started.")
        else:
            # Convert to DataFrame for display
            docs_df = pd.DataFrame([
                {
                    "ID": doc["document_id"],
                    "Filename": doc["filename"],
                    "Chunks": doc.get("chunk_count", 0),
                    "Processed Date": doc.get("processed_date", "Unknown")
                }
                for doc in documents
            ])
            
            st.dataframe(docs_df, use_container_width=True)
            
            # Document deletion
            doc_to_delete = st.selectbox("Select document to delete", [""] + list(docs_df["ID"]))
            
            if doc_to_delete and st.button(f"Delete {doc_to_delete}"):
                try:
                    with st.spinner("Deleting document..."):
                        client.delete_document(doc_to_delete)
                    
                    st.success(f"Document {doc_to_delete} deleted successfully")
                    
                    # Refresh document list
                    time.sleep(1)
                    st.rerun()
                
                except Exception as e:
                    st.error(f"Error deleting document: {str(e)}")
    
    except Exception as e:
        st.error(f"Error loading documents: {str(e)}")

def render_training_page(client: DocuChatClient):
    """Render the training page."""
    st.title("Model Training")
    
    st.info("""
    This page allows you to fine-tune the model using reinforcement learning based on your documents and feedback.
    Training helps improve the model's reasoning abilities and adaptability to your specific domain.
    """)
    
    # Training form
    st.subheader("Start Training")
    
    with st.form("training_form"):
        model_name = st.text_input("Model Name", value=load_config()['model']['base_model_name'])
        max_steps = st.number_input("Maximum Steps", min_value=1, value=100, step=10)
        learning_rate = st.number_input("Learning Rate", min_value=1e-7, max_value=1e-3, value=1e-6, format="%.7f")
        
        submitted = st.form_submit_button("Start Training")
        
        if submitted:
            try:
                with st.spinner("Starting training job..."):
                    response = client.start_training(
                        model_name=model_name,
                        max_steps=max_steps,
                        learning_rate=learning_rate
                    )
                
                st.success(f"Training started with ID: {response['training_id']}")
                
                # Save training ID to session state
                if "training_jobs" not in st.session_state:
                    st.session_state.training_jobs = []
                
                st.session_state.training_jobs.append(response['training_id'])
                
                # Show training status
                time.sleep(1)
                st.rerun()
            
            except Exception as e:
                st.error(f"Error starting training: {str(e)}")
    
    # Training status
    st.subheader("Training Jobs")
    
    if "training_jobs" in st.session_state and st.session_state.training_jobs:
        for job_id in st.session_state.training_jobs:
            with st.expander(f"Training Job: {job_id}"):
                try:
                    status = client.get_training_status(job_id)
                    
                    # Display status
                    st.write(f"Status: **{status['status']}**")
                    st.write(f"Timestamp: {status['timestamp']}")
                    
                    # Display metrics if available
                    if 'metrics' in status and status['metrics']:
                        metrics = status['metrics']
                        
                        if 'loss' in metrics and metrics['loss']:
                            # Plot loss curve
                            fig, ax = plt.subplots()
                            ax.plot(metrics['loss'])
                            ax.set_title('Training Loss')
                            ax.set_xlabel('Epoch')
                            ax.set_ylabel('Loss')
                            st.pyplot(fig)
                        
                        if 'reward' in metrics and metrics['reward']:
                            # Plot reward curve
                            fig, ax = plt.subplots()
                            ax.plot(metrics['reward'])
                            ax.set_title('Average Reward')
                            ax.set_xlabel('Epoch')
                            ax.set_ylabel('Reward')
                            st.pyplot(fig)
                        
                        # Display steps
                        if 'steps' in metrics:
                            st.write(f"Steps completed: {metrics['steps']}")
                
                except Exception as e:
                    st.error(f"Error getting training status: {str(e)}")
    else:
        st.info("No training jobs found. Start a training job to see its status here.")

def main():
    """Main application entry point."""
    st.set_page_config(
        page_title="DocuChat",
        page_icon="ðŸ“š",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Apply custom CSS
    st.markdown("""
    <style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Render sidebar and get selected page
    page = render_sidebar()
    
    # Initialize API client
    api_url = st.session_state.get("api_url", "http://localhost:8000")
    client = DocuChatClient(api_url)
    
    # Render selected page
    if page == "Chat":
        render_chat_page(client)
    elif page == "Documents":
        render_documents_page(client)
    elif page == "Training":
        render_training_page(client)

if __name__ == "__main__":
    main()
